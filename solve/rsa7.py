import tools
from Crypto.Util.number import *
import gmpy2
import libnum

'''
flag = bytes_to_long(open("flag").read().encode() + os.urandom(200))

p = 174841218668625475959541512640956452155550307119479663690903641194960085862692002072629763432688989681822645076520278851679469077878758405780013459943170833085479960908021953245791403470277480668402446570792387735880851551386737560567454906585757743480629026326058033774090138614445180185346712305561226484389
q = 134175129948141685717549832841241165684844418797343685630686754476433463689434012268272614980265270351640656943862696456501556544108997954980677040979640758702819267481962990548109001394612095237505171262333722757346074894508283227420419825646195047380630319091958323844480110152909060245444477147962961361649
n = p * q
e = 2
print(pow(flag, e, n))
'''

p = 174841218668625475959541512640956452155550307119479663690903641194960085862692002072629763432688989681822645076520278851679469077878758405780013459943170833085479960908021953245791403470277480668402446570792387735880851551386737560567454906585757743480629026326058033774090138614445180185346712305561226484389
q = 134175129948141685717549832841241165684844418797343685630686754476433463689434012268272614980265270351640656943862696456501556544108997954980677040979640758702819267481962990548109001394612095237505171262333722757346074894508283227420419825646195047380630319091958323844480110152909060245444477147962961361649
n = p * q
e = 2
c = 14409369572822819576145464718156076095261691163341839228235696194271632975552672664433851035825768899109024651433962192196441238149873991080365453570704804116582776898072857488911393070184820313961745580177795261734359656979423318093634849925251309586940328344082854390695374509958639111533764208618992795542036388253182139104479537763119529235459600855559744134423457963069825590529379014878894648118173471499191899893858805321733574167153907075710038286529958499176326219581565616304252652199044602607139760127754678136472001737714936821194539663712873574588802378753963457688024768608078641278749765343835308276920

# p,q = 1 mod4
if libnum.has_sqrtmod(c,{p:1}):
    m_p=list(libnum.sqrtmod(c,{p:1}))
else:
    print('m_p error!')
    exit()
if libnum.has_sqrtmod(c,{q:1}):
    m_q=list(libnum.sqrtmod(c,{q:1}))
else:
    print('m_q error!')
    exit()

# 计算yp和yq
inv_p = gmpy2.invert(p, q)
inv_q = gmpy2.invert(q, p)

# 计算a,b,c,d
a=[]
a.append((inv_p * p * m_q[0] + inv_q * q * m_p[0]) % n)
a.append(n - a[0])
a.append((inv_p * p * m_q[0] - inv_q * q * m_p[0]) % n)
a.append(n - a[2])
flag=[0]*4
for i in range(4):
    flag[i]=tools.long_to_flag(a[i],1)
    print(flag[i])




